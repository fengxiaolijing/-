node("maven-2-docker"){
    k8s_apiserver = 'http://10.0.110.180:8080'
    project_name = 'ucweb-api-test'
    k8s_namespace = 'tahoe-test'
    registry_url = 'http://k8s.harbor'
    registry_addr = 'k8s.harbor'
    registry_access = 'harbor-general'
    maintainer_name = 'uc'
    container_name = 'webapi'
    build_tag = "1.0.${BUILD_NUMBER}"
    nexus3_addr = '10.0.110.184:8081'
    nexus3_access = 'nexus-admin'
    nexus3_repository = 'jenkins-snapshots'
    nexus3_artifact_id = 'ucweb-api'
    nexus3_group_id = 'com.tahoecn'
    nexus3_upload_suffix = 'debug'
    nexus3_upload_type = 'tar.gz'

    stage("环境准备")
        if("${deploy_args}" == "deploy"){
            stage("清除当前目录")
                sh 'rm -rf ./*'
               //  删除容器内容
            stage("获取环境变量")
                sh "env"
                sh "mkdir -p /usr/git/bin/ && ln -sf /usr/bin/git /usr/git/bin/"
               //  获取变量
            stage("获取当前服务信息")
                sh "kubectl -s ${k8s_apiserver} describe deployment ${project_name} -n ${k8s_namespace}  | true "
              // 获取k8s api信息 

            stage("准备 Dockerfile")
                sh "mkdir -p /tmp/${JOB_NAME}/${BUILD_NUMBER}"
                git(credentialsId: 'd273151c-59ad-4c86-a6a2-b27b47d2553b', url: 'git@git.tahoecn.com:ops/jenkins-pipeline-deploy.git', branch: 'master')
                sh "cp -a ./* /tmp/${JOB_NAME}/${BUILD_NUMBER}/"
              // 在jenkins上创建目录tmp下的工程 版本号
              // gilab 上传pme_jenkins的秘钥 获取源码  (流水线的源码)
              // 复制源码到版本目录里

            stage("获取源码")
                git(credentialsId: 'd273151c-59ad-4c86-a6a2-b27b47d2553b', url: 'git@git.tahoecn.com:uc/ucweb-api.git', branch: 'master')
               // 获取gitlab上源码，获取gitlab上的ucweb-api源码

            stage("项目打包")
                sh "echo 项目无需编译"
                sh "tar zcf ucweb-api-${build_tag}.${nexus3_upload_type} -C \$(dirname ${PWD}) \$(basename $PWD)"
                //  打包源码,加版本号到当前目录

            stage("本地归档")
                archiveArtifacts '*.tar.gz'
                //  本地归档
            stage("Nexus 归档")
                nexusArtifactUploader(
                    credentialsId: "${nexus3_access}", 
                    groupId: "${nexus3_group_id}", 
                    nexusUrl: "${nexus3_addr}", 
                    nexusVersion: 'nexus3', 
                    protocol: 'http', 
                    repository: "${nexus3_repository}", 
                    version: "${build_tag}",
                    artifacts: [
                            [artifactId: "${nexus3_artifact_id}", classifier: "${nexus3_upload_suffix}", file: "ucweb-api-${build_tag}.${nexus3_upload_type}", type: "${nexus3_upload_type}"]
                    ]
                )
                // nexus 归档
            stage("镜像封装")
                withCredentials([usernamePassword(credentialsId: "${registry_access}", passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                    sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD} ${registry_url}"
                    sh "cd /root && docker build --build-arg JobPath=workspace/${JOB_NAME} -t ${registry_addr}/${maintainer_name}/${container_name}:${build_tag} -f /tmp/${JOB_NAME}/${BUILD_NUMBER}/Configures/ucweb-api/develop/docker/Dockerfile ."
                }
               // withCredentials获取凭证 底下的变量  
               // 登录docker harbor 账号密码
               // build 生成镜像 信息 指定路径
            stage("镜像上传")
                sh "docker push ${registry_addr}/${maintainer_name}/${container_name}:${build_tag}"
               // 上传镜像到私有仓库
      
            stage("清除本地缓存")
               sh "docker rmi -f ${registry_addr}/${maintainer_name}/${container_name}:${build_tag}"
               //删除本地多余的镜像
     
            stage("发布 K8s")
                sh "kubectl -s ${k8s_apiserver} set image deployment/${project_name} ucweb-api-test=${registry_addr}/${maintainer_name}/${container_name}:${build_tag} -n ${k8s_namespace}"
               // 发布k8s pod 指定api 指定项目名称 har等信息版本号 -n 名命空间

            stage("获取当前服务信息")
                sh "kubectl -s ${k8s_apiserver} describe deployment ${project_name} -n ${k8s_namespace}"
        }
            //  获取当前pod服务详细信息  
          
//    回滚开始
        if ("${deploy_args}" == "rollback"){
            stage("清除当前目录")
                sh 'rm -rf ./*'
            //  删除容器内容
			  
			  
            stage("查看当前项目的历史版本")
                sh "env"
            // 全局变量

            stage("获取当前服务历史更新")
                sh "echo '********************************************************************************************************************************'"
                sh """kubectl -s ${k8s_apiserver} rollout history deployments ${project_name} -n ${k8s_namespace} --revision=0 | sed '1,2d' | grep -e '\\s' | awk '{print \$1}' | sort -rn| head -n5 | xargs -i kubectl -s ${k8s_apiserver} rollout history deployments ${project_name} -n ${k8s_namespace} --revision={}"""
                sh "echo '********************************************************************************************************************************'"
            // 获取当前pod服务历史的服务信息

            stage("获取当前服务信息")
                sh "kubectl -s ${k8s_apiserver} describe deployment ${project_name} -n ${k8s_namespace}"
            // 获取当前pod服务详细信息

            stage("回滚版本为: $version")
                nexus3_group_id_directory = sh(returnStdout: true, script: "echo $nexus3_group_id | sed 's#\\.#\\/#g'").trim()
                sh "wget http://${nexus3_addr}/repository/${nexus3_repository}/${nexus3_group_id_directory}/${nexus3_artifact_id}/1.0.${version}/ucweb-api-1.0.${version}-${nexus3_upload_suffix}.${nexus3_upload_type} -O ./ucweb-api-${build_tag}.tar.gz"
            //  泰和 执行下载enxus的历史的包


            stage("本地归档")
                archiveArtifacts '*.tar.gz'
              //  本地归档
            stage("Nexus 归档")
                nexusArtifactUploader(
                    credentialsId: "${nexus3_access}", 
                    groupId: "${nexus3_group_id}", 
                    nexusUrl: "${nexus3_addr}", 
                    nexusVersion: 'nexus3', 
                    protocol: 'http', 
                    repository: "${nexus3_repository}", 
                    version: "${build_tag}",
                    artifacts: [
                            [artifactId: "${nexus3_artifact_id}", classifier: "${nexus3_upload_suffix}", file: "ucweb-api-${build_tag}.${nexus3_upload_type}", type: "${nexus3_upload_type}"]
                    ]
                )
				//  nexus 版本号归档
				
            stage("更新镜像版本")
                withCredentials([usernamePassword(credentialsId: "${registry_access}", passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                    sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD} ${registry_url}"
                    sh "docker pull ${registry_addr}/${maintainer_name}/${container_name}:1.0.${version}"
                    sh "docker tag ${registry_addr}/${maintainer_name}/${container_name}:1.0.${version} ${registry_addr}/${maintainer_name}/${container_name}:${build_tag}"
                    sh "docker push ${registry_addr}/${maintainer_name}/${container_name}:${build_tag}"
                    sh "docker rmi -f ${registry_addr}/${maintainer_name}/${container_name}:1.0.${version} ${registry_addr}/${maintainer_name}/${container_name}:${build_tag}"
                }
				//  docker登录的变量获取 
				//  登录docker 账号 harbor 
				//  docker 下载对应版本号
				//  docker 打标签历史版本号  
				//  docker 删除当前不需要的版本
				
            stage("发布 K8s")
                sh "kubectl -s ${k8s_apiserver} set image deployment/${project_name} ucweb-api-test=${registry_addr}/${maintainer_name}/${container_name}:${build_tag} -n ${k8s_namespace}"
               //  发布pod ucweb-api-test版本号  命名空间
            stage("获取当前服务信息")
                sh "kubectl -s ${k8s_apiserver} describe deployment ${project_name} -n ${k8s_namespace}"
			// 获取当前pod服务信息
        }
}
